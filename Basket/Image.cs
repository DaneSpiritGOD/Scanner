// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Image.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Basket {

  /// <summary>Holder for reflection information generated from Image.proto</summary>
  public static partial class ImageReflection {

    #region Descriptor
    /// <summary>File descriptor for Image.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtJbWFnZS5wcm90bxIGQmFza2V0IpcBCgVJbWFnZRINCgVXaWR0aBgBIAEo",
            "BRIOCgZIZWlnaHQYAiABKAUSFAoMQ2hhbm5lbENvdW50GAMgASgFEgsKA1Jh",
            "dxgEIAEoDBIaCgRSb2lzGAUgAygLMgwuQmFza2V0LlJlY3QSEgoKU29sdXRp",
            "b25JZBgHIAEoBRIPCgdFcnJvcklkGAggASgFEgsKA0tleRgJIAEoCSJMCgRS",
            "ZWN0EgkKAVgYASABKAUSCQoBWRgCIAEoBRINCgVXaWR0aBgDIAEoBRIOCgZI",
            "ZWlnaHQYBCABKAUSDwoHRXJyb3JJZBgFIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Basket.Image), global::Basket.Image.Parser, new[]{ "Width", "Height", "ChannelCount", "Raw", "Rois", "SolutionId", "ErrorId", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Basket.Rect), global::Basket.Rect.Parser, new[]{ "X", "Y", "Width", "Height", "ErrorId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Basket.ImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      channelCount_ = other.channelCount_;
      raw_ = other.raw_;
      rois_ = other.rois_.Clone();
      solutionId_ = other.solutionId_;
      errorId_ = other.errorId_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "ChannelCount" field.</summary>
    public const int ChannelCountFieldNumber = 3;
    private int channelCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelCount {
      get { return channelCount_; }
      set {
        channelCount_ = value;
      }
    }

    /// <summary>Field number for the "Raw" field.</summary>
    public const int RawFieldNumber = 4;
    private pb::ByteString raw_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Raw {
      get { return raw_; }
      set {
        raw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rois" field.</summary>
    public const int RoisFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Basket.Rect> _repeated_rois_codec
        = pb::FieldCodec.ForMessage(42, global::Basket.Rect.Parser);
    private readonly pbc::RepeatedField<global::Basket.Rect> rois_ = new pbc::RepeatedField<global::Basket.Rect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Basket.Rect> Rois {
      get { return rois_; }
    }

    /// <summary>Field number for the "SolutionId" field.</summary>
    public const int SolutionIdFieldNumber = 7;
    private int solutionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SolutionId {
      get { return solutionId_; }
      set {
        solutionId_ = value;
      }
    }

    /// <summary>Field number for the "ErrorId" field.</summary>
    public const int ErrorIdFieldNumber = 8;
    private int errorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorId {
      get { return errorId_; }
      set {
        errorId_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 9;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ChannelCount != other.ChannelCount) return false;
      if (Raw != other.Raw) return false;
      if(!rois_.Equals(other.rois_)) return false;
      if (SolutionId != other.SolutionId) return false;
      if (ErrorId != other.ErrorId) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ChannelCount != 0) hash ^= ChannelCount.GetHashCode();
      if (Raw.Length != 0) hash ^= Raw.GetHashCode();
      hash ^= rois_.GetHashCode();
      if (SolutionId != 0) hash ^= SolutionId.GetHashCode();
      if (ErrorId != 0) hash ^= ErrorId.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (ChannelCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelCount);
      }
      if (Raw.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Raw);
      }
      rois_.WriteTo(output, _repeated_rois_codec);
      if (SolutionId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SolutionId);
      }
      if (ErrorId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ErrorId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (ChannelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelCount);
      }
      if (Raw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Raw);
      }
      size += rois_.CalculateSize(_repeated_rois_codec);
      if (SolutionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SolutionId);
      }
      if (ErrorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ChannelCount != 0) {
        ChannelCount = other.ChannelCount;
      }
      if (other.Raw.Length != 0) {
        Raw = other.Raw;
      }
      rois_.Add(other.rois_);
      if (other.SolutionId != 0) {
        SolutionId = other.SolutionId;
      }
      if (other.ErrorId != 0) {
        ErrorId = other.ErrorId;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            ChannelCount = input.ReadInt32();
            break;
          }
          case 34: {
            Raw = input.ReadBytes();
            break;
          }
          case 42: {
            rois_.AddEntriesFrom(input, _repeated_rois_codec);
            break;
          }
          case 56: {
            SolutionId = input.ReadInt32();
            break;
          }
          case 64: {
            ErrorId = input.ReadInt32();
            break;
          }
          case 74: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rect : pb::IMessage<Rect> {
    private static readonly pb::MessageParser<Rect> _parser = new pb::MessageParser<Rect>(() => new Rect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Basket.ImageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect(Rect other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      width_ = other.width_;
      height_ = other.height_;
      errorId_ = other.errorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rect Clone() {
      return new Rect(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "ErrorId" field.</summary>
    public const int ErrorIdFieldNumber = 5;
    private int errorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorId {
      get { return errorId_; }
      set {
        errorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ErrorId != other.ErrorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ErrorId != 0) hash ^= ErrorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (ErrorId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ErrorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (ErrorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rect other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ErrorId != 0) {
        ErrorId = other.ErrorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            ErrorId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
