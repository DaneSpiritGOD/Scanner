// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SimpleRawImage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Basket {

  /// <summary>Holder for reflection information generated from SimpleRawImage.proto</summary>
  public static partial class SimpleRawImageReflection {

    #region Descriptor
    /// <summary>File descriptor for SimpleRawImage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimpleRawImageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRTaW1wbGVSYXdJbWFnZS5wcm90bxIGQmFza2V0IpABCg5TaW1wbGVSYXdJ",
            "bWFnZRISCgpTb2x1dGlvbklkGAEgASgFEg8KB0Vycm9ySWQYAiABKAUSDQoF",
            "V2lkdGgYAyABKAUSDgoGSGVpZ2h0GAQgASgFEhQKDENoYW5uZWxDb3VudBgF",
            "IAEoBRIPCgdSYXdEYXRhGAYgASgMEhMKC0NsYXNzaWZ5S2V5GAcgASgJYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Basket.SimpleRawImage), global::Basket.SimpleRawImage.Parser, new[]{ "SolutionId", "ErrorId", "Width", "Height", "ChannelCount", "RawData", "ClassifyKey" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SimpleRawImage : pb::IMessage<SimpleRawImage> {
    private static readonly pb::MessageParser<SimpleRawImage> _parser = new pb::MessageParser<SimpleRawImage>(() => new SimpleRawImage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleRawImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Basket.SimpleRawImageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleRawImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleRawImage(SimpleRawImage other) : this() {
      solutionId_ = other.solutionId_;
      errorId_ = other.errorId_;
      width_ = other.width_;
      height_ = other.height_;
      channelCount_ = other.channelCount_;
      rawData_ = other.rawData_;
      classifyKey_ = other.classifyKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleRawImage Clone() {
      return new SimpleRawImage(this);
    }

    /// <summary>Field number for the "SolutionId" field.</summary>
    public const int SolutionIdFieldNumber = 1;
    private int solutionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SolutionId {
      get { return solutionId_; }
      set {
        solutionId_ = value;
      }
    }

    /// <summary>Field number for the "ErrorId" field.</summary>
    public const int ErrorIdFieldNumber = 2;
    private int errorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorId {
      get { return errorId_; }
      set {
        errorId_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "ChannelCount" field.</summary>
    public const int ChannelCountFieldNumber = 5;
    private int channelCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelCount {
      get { return channelCount_; }
      set {
        channelCount_ = value;
      }
    }

    /// <summary>Field number for the "RawData" field.</summary>
    public const int RawDataFieldNumber = 6;
    private pb::ByteString rawData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RawData {
      get { return rawData_; }
      set {
        rawData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClassifyKey" field.</summary>
    public const int ClassifyKeyFieldNumber = 7;
    private string classifyKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassifyKey {
      get { return classifyKey_; }
      set {
        classifyKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleRawImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleRawImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SolutionId != other.SolutionId) return false;
      if (ErrorId != other.ErrorId) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ChannelCount != other.ChannelCount) return false;
      if (RawData != other.RawData) return false;
      if (ClassifyKey != other.ClassifyKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SolutionId != 0) hash ^= SolutionId.GetHashCode();
      if (ErrorId != 0) hash ^= ErrorId.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ChannelCount != 0) hash ^= ChannelCount.GetHashCode();
      if (RawData.Length != 0) hash ^= RawData.GetHashCode();
      if (ClassifyKey.Length != 0) hash ^= ClassifyKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SolutionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SolutionId);
      }
      if (ErrorId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrorId);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (ChannelCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChannelCount);
      }
      if (RawData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(RawData);
      }
      if (ClassifyKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ClassifyKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SolutionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SolutionId);
      }
      if (ErrorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorId);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (ChannelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelCount);
      }
      if (RawData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RawData);
      }
      if (ClassifyKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassifyKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleRawImage other) {
      if (other == null) {
        return;
      }
      if (other.SolutionId != 0) {
        SolutionId = other.SolutionId;
      }
      if (other.ErrorId != 0) {
        ErrorId = other.ErrorId;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ChannelCount != 0) {
        ChannelCount = other.ChannelCount;
      }
      if (other.RawData.Length != 0) {
        RawData = other.RawData;
      }
      if (other.ClassifyKey.Length != 0) {
        ClassifyKey = other.ClassifyKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SolutionId = input.ReadInt32();
            break;
          }
          case 16: {
            ErrorId = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            ChannelCount = input.ReadInt32();
            break;
          }
          case 50: {
            RawData = input.ReadBytes();
            break;
          }
          case 58: {
            ClassifyKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
